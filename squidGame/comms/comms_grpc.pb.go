// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package comms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Juego1Client is the client API for Juego1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Juego1Client interface {
	Jugada1(ctx context.Context, in *JugadorJuego1, opts ...grpc.CallOption) (*EstadoJuego, error)
	QuieroJugar(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Jugador, error)
}

type juego1Client struct {
	cc grpc.ClientConnInterface
}

func NewJuego1Client(cc grpc.ClientConnInterface) Juego1Client {
	return &juego1Client{cc}
}

func (c *juego1Client) Jugada1(ctx context.Context, in *JugadorJuego1, opts ...grpc.CallOption) (*EstadoJuego, error) {
	out := new(EstadoJuego)
	err := c.cc.Invoke(ctx, "/comms.Juego1/Jugada1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *juego1Client) QuieroJugar(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Jugador, error) {
	out := new(Jugador)
	err := c.cc.Invoke(ctx, "/comms.Juego1/QuieroJugar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Juego1Server is the server API for Juego1 service.
// All implementations must embed UnimplementedJuego1Server
// for forward compatibility
type Juego1Server interface {
	Jugada1(context.Context, *JugadorJuego1) (*EstadoJuego, error)
	QuieroJugar(context.Context, *Empty) (*Jugador, error)
	mustEmbedUnimplementedJuego1Server()
}

// UnimplementedJuego1Server must be embedded to have forward compatible implementations.
type UnimplementedJuego1Server struct {
}

func (UnimplementedJuego1Server) Jugada1(context.Context, *JugadorJuego1) (*EstadoJuego, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Jugada1 not implemented")
}
func (UnimplementedJuego1Server) QuieroJugar(context.Context, *Empty) (*Jugador, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuieroJugar not implemented")
}
func (UnimplementedJuego1Server) mustEmbedUnimplementedJuego1Server() {}

// UnsafeJuego1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Juego1Server will
// result in compilation errors.
type UnsafeJuego1Server interface {
	mustEmbedUnimplementedJuego1Server()
}

func RegisterJuego1Server(s grpc.ServiceRegistrar, srv Juego1Server) {
	s.RegisterService(&Juego1_ServiceDesc, srv)
}

func _Juego1_Jugada1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JugadorJuego1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Juego1Server).Jugada1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comms.Juego1/Jugada1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Juego1Server).Jugada1(ctx, req.(*JugadorJuego1))
	}
	return interceptor(ctx, in, info, handler)
}

func _Juego1_QuieroJugar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Juego1Server).QuieroJugar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comms.Juego1/QuieroJugar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Juego1Server).QuieroJugar(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Juego1_ServiceDesc is the grpc.ServiceDesc for Juego1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Juego1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comms.Juego1",
	HandlerType: (*Juego1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Jugada1",
			Handler:    _Juego1_Jugada1_Handler,
		},
		{
			MethodName: "QuieroJugar",
			Handler:    _Juego1_QuieroJugar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comms.proto",
}

// MensajeDataLiderClient is the client API for MensajeDataLider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MensajeDataLiderClient interface {
	Jugada(ctx context.Context, in *JugadaDataNode, opts ...grpc.CallOption) (*Empty, error)
	HistorialJugador(ctx context.Context, in *Jugador, opts ...grpc.CallOption) (*HistorialJugadas, error)
}

type mensajeDataLiderClient struct {
	cc grpc.ClientConnInterface
}

func NewMensajeDataLiderClient(cc grpc.ClientConnInterface) MensajeDataLiderClient {
	return &mensajeDataLiderClient{cc}
}

func (c *mensajeDataLiderClient) Jugada(ctx context.Context, in *JugadaDataNode, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/comms.MensajeDataLider/Jugada", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mensajeDataLiderClient) HistorialJugador(ctx context.Context, in *Jugador, opts ...grpc.CallOption) (*HistorialJugadas, error) {
	out := new(HistorialJugadas)
	err := c.cc.Invoke(ctx, "/comms.MensajeDataLider/HistorialJugador", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MensajeDataLiderServer is the server API for MensajeDataLider service.
// All implementations must embed UnimplementedMensajeDataLiderServer
// for forward compatibility
type MensajeDataLiderServer interface {
	Jugada(context.Context, *JugadaDataNode) (*Empty, error)
	HistorialJugador(context.Context, *Jugador) (*HistorialJugadas, error)
	mustEmbedUnimplementedMensajeDataLiderServer()
}

// UnimplementedMensajeDataLiderServer must be embedded to have forward compatible implementations.
type UnimplementedMensajeDataLiderServer struct {
}

func (UnimplementedMensajeDataLiderServer) Jugada(context.Context, *JugadaDataNode) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Jugada not implemented")
}
func (UnimplementedMensajeDataLiderServer) HistorialJugador(context.Context, *Jugador) (*HistorialJugadas, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistorialJugador not implemented")
}
func (UnimplementedMensajeDataLiderServer) mustEmbedUnimplementedMensajeDataLiderServer() {}

// UnsafeMensajeDataLiderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MensajeDataLiderServer will
// result in compilation errors.
type UnsafeMensajeDataLiderServer interface {
	mustEmbedUnimplementedMensajeDataLiderServer()
}

func RegisterMensajeDataLiderServer(s grpc.ServiceRegistrar, srv MensajeDataLiderServer) {
	s.RegisterService(&MensajeDataLider_ServiceDesc, srv)
}

func _MensajeDataLider_Jugada_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JugadaDataNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MensajeDataLiderServer).Jugada(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comms.MensajeDataLider/Jugada",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MensajeDataLiderServer).Jugada(ctx, req.(*JugadaDataNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _MensajeDataLider_HistorialJugador_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Jugador)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MensajeDataLiderServer).HistorialJugador(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comms.MensajeDataLider/HistorialJugador",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MensajeDataLiderServer).HistorialJugador(ctx, req.(*Jugador))
	}
	return interceptor(ctx, in, info, handler)
}

// MensajeDataLider_ServiceDesc is the grpc.ServiceDesc for MensajeDataLider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MensajeDataLider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comms.MensajeDataLider",
	HandlerType: (*MensajeDataLiderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Jugada",
			Handler:    _MensajeDataLider_Jugada_Handler,
		},
		{
			MethodName: "HistorialJugador",
			Handler:    _MensajeDataLider_HistorialJugador_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comms.proto",
}

// PozoClient is the client API for Pozo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PozoClient interface {
	PedidoPozo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MontoAcumulado, error)
}

type pozoClient struct {
	cc grpc.ClientConnInterface
}

func NewPozoClient(cc grpc.ClientConnInterface) PozoClient {
	return &pozoClient{cc}
}

func (c *pozoClient) PedidoPozo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MontoAcumulado, error) {
	out := new(MontoAcumulado)
	err := c.cc.Invoke(ctx, "/comms.Pozo/PedidoPozo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PozoServer is the server API for Pozo service.
// All implementations must embed UnimplementedPozoServer
// for forward compatibility
type PozoServer interface {
	PedidoPozo(context.Context, *Empty) (*MontoAcumulado, error)
	mustEmbedUnimplementedPozoServer()
}

// UnimplementedPozoServer must be embedded to have forward compatible implementations.
type UnimplementedPozoServer struct {
}

func (UnimplementedPozoServer) PedidoPozo(context.Context, *Empty) (*MontoAcumulado, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PedidoPozo not implemented")
}
func (UnimplementedPozoServer) mustEmbedUnimplementedPozoServer() {}

// UnsafePozoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PozoServer will
// result in compilation errors.
type UnsafePozoServer interface {
	mustEmbedUnimplementedPozoServer()
}

func RegisterPozoServer(s grpc.ServiceRegistrar, srv PozoServer) {
	s.RegisterService(&Pozo_ServiceDesc, srv)
}

func _Pozo_PedidoPozo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PozoServer).PedidoPozo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comms.Pozo/PedidoPozo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PozoServer).PedidoPozo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Pozo_ServiceDesc is the grpc.ServiceDesc for Pozo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pozo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comms.Pozo",
	HandlerType: (*PozoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PedidoPozo",
			Handler:    _Pozo_PedidoPozo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comms.proto",
}

// DataNodeClient is the client API for DataNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataNodeClient interface {
	GuardarDatos(ctx context.Context, in *JugadaDataNode, opts ...grpc.CallOption) (*Empty, error)
	PedirDatos(ctx context.Context, in *JugadorRonda, opts ...grpc.CallOption) (*Empty, error)
}

type dataNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewDataNodeClient(cc grpc.ClientConnInterface) DataNodeClient {
	return &dataNodeClient{cc}
}

func (c *dataNodeClient) GuardarDatos(ctx context.Context, in *JugadaDataNode, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/comms.DataNode/GuardarDatos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeClient) PedirDatos(ctx context.Context, in *JugadorRonda, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/comms.DataNode/PedirDatos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataNodeServer is the server API for DataNode service.
// All implementations must embed UnimplementedDataNodeServer
// for forward compatibility
type DataNodeServer interface {
	GuardarDatos(context.Context, *JugadaDataNode) (*Empty, error)
	PedirDatos(context.Context, *JugadorRonda) (*Empty, error)
	mustEmbedUnimplementedDataNodeServer()
}

// UnimplementedDataNodeServer must be embedded to have forward compatible implementations.
type UnimplementedDataNodeServer struct {
}

func (UnimplementedDataNodeServer) GuardarDatos(context.Context, *JugadaDataNode) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuardarDatos not implemented")
}
func (UnimplementedDataNodeServer) PedirDatos(context.Context, *JugadorRonda) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PedirDatos not implemented")
}
func (UnimplementedDataNodeServer) mustEmbedUnimplementedDataNodeServer() {}

// UnsafeDataNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataNodeServer will
// result in compilation errors.
type UnsafeDataNodeServer interface {
	mustEmbedUnimplementedDataNodeServer()
}

func RegisterDataNodeServer(s grpc.ServiceRegistrar, srv DataNodeServer) {
	s.RegisterService(&DataNode_ServiceDesc, srv)
}

func _DataNode_GuardarDatos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JugadaDataNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).GuardarDatos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comms.DataNode/GuardarDatos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).GuardarDatos(ctx, req.(*JugadaDataNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNode_PedirDatos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JugadorRonda)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).PedirDatos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comms.DataNode/PedirDatos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).PedirDatos(ctx, req.(*JugadorRonda))
	}
	return interceptor(ctx, in, info, handler)
}

// DataNode_ServiceDesc is the grpc.ServiceDesc for DataNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comms.DataNode",
	HandlerType: (*DataNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GuardarDatos",
			Handler:    _DataNode_GuardarDatos_Handler,
		},
		{
			MethodName: "PedirDatos",
			Handler:    _DataNode_PedirDatos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comms.proto",
}
